#######################################################################
## should be define by your particle mode (spheres or polyhedra)
move_particles_extra_data: nop
compute_new_vertices: nop # after update ghost
compute_fast_vertices: nop # after update ghost
reorder_extra_data: nop

########### Generic particle update block ################

# define a test node which outputs a boolean value 'trigger_move_particles'
# which tells when to move particles across cells and update neighbor lists
evaluate_particle_displ:
  rebind: { threshold: max_displ , result: particle_displ }
  body: 
    - particle_displ_over

evaluate_driver_displ:
  rebind: { threshold: max_displ , result: driver_displ }
  body: 
    - driver_displ_over

trigger_move_particles:
  - evaluate_particle_displ
  - evaluate_driver_displ
  - combine_move_particles:
      rebind: { in1: driver_displ , in2: particle_displ, result: trigger_move_particles}
      body: [ boolean_or ]


################### AMR ############################
rebuild_amr:
  sub_grid_density: 6.5
  amr_z_curve: false
  enforced_ordering: 1
####################################################

compress_data: nop

################### Neighbor list update ############################
chunk_neighbors_contact:
  config:
    free_scratch_memory: true
    build_particle_offset: true
    subcell_compaction: true
    scratch_mem_per_cell: 1048576
    stream_prealloc_factor: 1.05
    chunk_size: 1

chunk_neighbors_impl: 
  - chunk_neighbors_contact

update_particle_neighbors:
  - amr_grid_pairs
  - chunk_neighbors_impl
  - resize_particle_locks
####################################################################

grid_post_processing: grid_memory_compact

compute_all_vertices:
  - compute_new_vertices
  - driver_vertices:
     force_host: true

ghost_full_update:
  - ghost_comm_scheme
  - ghost_update_all
  - update_traversals
  - compute_all_vertices


################### parallel particle migration ############################

## These operator should be defined by your particle mode (spheres or polyhedra)
migrate_particles: nop
add_generated_particles: nop

particle_generator:
  condition: trigger_generator
  body:
    - message: { mesg: "The particle generator is triggered ...", endl: true} 
    - add_generated_particles

parallel_update_particles:
  - migrate_particles
  - ghost_full_update
  - grid_post_processing
  - grid_stl_mesh:
     force_reset: true
  - update_particle_neighbors

# define actions to initialize particles at startup, just after file read
init_particles:
  - move_particles 
  - extend_domain
  - load_balance
  - migrate_particles
  - ghost_full_update
  - grid_post_processing
  - grid_stl_mesh:
     force_reset: true
  - update_particle_neighbors
###########################################################################


########################### Load balancing ############################
# trigger load balance whenever domain size changed, whatever freq has been requested
# extend_domain has an input named enable_domain_extension to control if domain extesion is allowed
# enable_domain_extension is defined as false in 'global'
trigger_load_balance:
  - trigger_lb_tmp:
      condition: enable_load_balance
      rebind: { result: trigger_lb_tmp , freq: simulation_load_balance_frequency }
      body:
        - nth_timestep: { first: false , delayed: true }
  - extend_domain
  - combine:
      rebind: { in1: trigger_lb_tmp , in2: domain_extended , result: trigger_load_balance }
      body: [ boolean_or ]

cost_model: 
  - simple_cost_model: { ccost: 1.0 , pdens: 40.0 , pdens2:0.0 , pdens3:0.000 }

# define how load balancing is done
load_balance:
  - cost_model
  - load_balance_rcb
#  - cpu_gpu_load_balance

load_balancing_if_triggered:
  condition: trigger_load_balance
  body:
    - load_balance
    - grid_stl_mesh: # force to rebuild grid mesh
       force_reset: true

update_particles_full_body:
  - compress_data
  - move_particles_extra_data
  - trigger_load_balance
  - load_balancing_if_triggered
  - parallel_update_particles
  - reorder_extra_data

update_particles_full:
  condition: trigger_move_particles
  body:
    - backup_drivers
    - particle_generator
    - update_particles_full_body

update_particles_fast_body:
    - ghost_update_rq:
       gpu_buffer_pack: true
       async_buffer_pack: true
       staging_buffer: true
       serialize_pack_send: true
       wait_all: true
    - compute_fast_vertices
    - driver_vertices:
       force_host: false

update_particles_fast:
  condition: not trigger_move_particles
  body:
    - update_particles_fast_body

######################################################
############# Particle Generator #####################
######################################################
## if no particle generator, it follows the trigger_move_particles behavior
combine_particle_generator: 
  rebind: { in1: trigger_generator , in2: trigger_move_particles , result: trigger_move_particles }
  body: [ boolean_or ]

trigger_particle_generator:
  rebind: { freq: simulation_generator_frequency , result: trigger_generator }
  body:
    - nth_timestep: { first: false }

######################################################
check_and_update_particles:
  - trigger_move_particles
  - combine_particle_generator
  - update_particles_full
  - update_particles_fast
  - loadbalance_log_helper:
      rebind: { lb_flag: trigger_load_balance , move_flag: trigger_move_particles }
      body: [ lb_event_counter ]
